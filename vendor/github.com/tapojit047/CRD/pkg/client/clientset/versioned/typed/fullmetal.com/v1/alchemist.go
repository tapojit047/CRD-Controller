/*
Copyright Mehedi Hasan.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/tapojit047/CRD/pkg/apis/fullmetal.com/v1"
	scheme "github.com/tapojit047/CRD/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AlchemistsGetter has a method to return a AlchemistInterface.
// A group's client should implement this interface.
type AlchemistsGetter interface {
	Alchemists(namespace string) AlchemistInterface
}

// AlchemistInterface has methods to work with Alchemist resources.
type AlchemistInterface interface {
	Create(ctx context.Context, alchemist *v1.Alchemist, opts metav1.CreateOptions) (*v1.Alchemist, error)
	Update(ctx context.Context, alchemist *v1.Alchemist, opts metav1.UpdateOptions) (*v1.Alchemist, error)
	UpdateStatus(ctx context.Context, alchemist *v1.Alchemist, opts metav1.UpdateOptions) (*v1.Alchemist, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.Alchemist, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.AlchemistList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Alchemist, err error)
	AlchemistExpansion
}

// alchemists implements AlchemistInterface
type alchemists struct {
	client rest.Interface
	ns     string
}

// newAlchemists returns a Alchemists
func newAlchemists(c *FullmetalV1Client, namespace string) *alchemists {
	return &alchemists{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the alchemist, and returns the corresponding alchemist object, and an error if there is any.
func (c *alchemists) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Alchemist, err error) {
	result = &v1.Alchemist{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("alchemists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Alchemists that match those selectors.
func (c *alchemists) List(ctx context.Context, opts metav1.ListOptions) (result *v1.AlchemistList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.AlchemistList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("alchemists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested alchemists.
func (c *alchemists) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("alchemists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a alchemist and creates it.  Returns the server's representation of the alchemist, and an error, if there is any.
func (c *alchemists) Create(ctx context.Context, alchemist *v1.Alchemist, opts metav1.CreateOptions) (result *v1.Alchemist, err error) {
	result = &v1.Alchemist{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("alchemists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(alchemist).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a alchemist and updates it. Returns the server's representation of the alchemist, and an error, if there is any.
func (c *alchemists) Update(ctx context.Context, alchemist *v1.Alchemist, opts metav1.UpdateOptions) (result *v1.Alchemist, err error) {
	result = &v1.Alchemist{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("alchemists").
		Name(alchemist.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(alchemist).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *alchemists) UpdateStatus(ctx context.Context, alchemist *v1.Alchemist, opts metav1.UpdateOptions) (result *v1.Alchemist, err error) {
	result = &v1.Alchemist{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("alchemists").
		Name(alchemist.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(alchemist).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the alchemist and deletes it. Returns an error if one occurs.
func (c *alchemists) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("alchemists").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *alchemists) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("alchemists").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched alchemist.
func (c *alchemists) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Alchemist, err error) {
	result = &v1.Alchemist{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("alchemists").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
