/*
Copyright Tapajit Chandra Paul.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/tapojit047/CRD-Controller/pkg/apis/fullmetal.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlchemistLister helps list Alchemists.
// All objects returned here must be treated as read-only.
type AlchemistLister interface {
	// List lists all Alchemists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Alchemist, err error)
	// Alchemists returns an object that can list and get Alchemists.
	Alchemists(namespace string) AlchemistNamespaceLister
	AlchemistListerExpansion
}

// alchemistLister implements the AlchemistLister interface.
type alchemistLister struct {
	indexer cache.Indexer
}

// NewAlchemistLister returns a new AlchemistLister.
func NewAlchemistLister(indexer cache.Indexer) AlchemistLister {
	return &alchemistLister{indexer: indexer}
}

// List lists all Alchemists in the indexer.
func (s *alchemistLister) List(selector labels.Selector) (ret []*v1.Alchemist, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Alchemist))
	})
	return ret, err
}

// Alchemists returns an object that can list and get Alchemists.
func (s *alchemistLister) Alchemists(namespace string) AlchemistNamespaceLister {
	return alchemistNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlchemistNamespaceLister helps list and get Alchemists.
// All objects returned here must be treated as read-only.
type AlchemistNamespaceLister interface {
	// List lists all Alchemists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Alchemist, err error)
	// Get retrieves the Alchemist from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Alchemist, error)
	AlchemistNamespaceListerExpansion
}

// alchemistNamespaceLister implements the AlchemistNamespaceLister
// interface.
type alchemistNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Alchemists in the indexer for a given namespace.
func (s alchemistNamespaceLister) List(selector labels.Selector) (ret []*v1.Alchemist, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Alchemist))
	})
	return ret, err
}

// Get retrieves the Alchemist from the indexer for a given namespace and name.
func (s alchemistNamespaceLister) Get(name string) (*v1.Alchemist, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("alchemist"), name)
	}
	return obj.(*v1.Alchemist), nil
}
